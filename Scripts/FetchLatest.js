const beautify = require('js-beautify').js;
const axios = require('axios');
const fs = require('fs');
const https = require('https');
const toolbox = require('tinytoolbox')

var DownloadFile = (_URL,path) =>
{
	return new Promise((res)=>
	{
		const WriteStream = fs.createWriteStream(path);

		https.get(_URL, (response) =>
		{
			response.pipe(WriteStream);
			WriteStream.on('finish',()=>
			{
				console.log(`Downloaded to '${path}'`);
				WriteStream.close();
				res();
			})
		})
	})
}

(async () =>{
	var JackboxWebsiteContents = await axios('https://jackbox.tv');
	JackboxWebsiteContents = JackboxWebsiteContents.data.split('\n');

	var JackboxJavascriptFilename;

	var ScriptTagRegex = /<script type="text\/javascript" src="\/app.([a-zA-Z0-9]{20}).js"><\/script>/g;

	var BundleMD5 = null;

//	console.log(JackboxWebsiteContents)

	await toolbox.async.forEach(JackboxWebsiteContents,(_line)=>
	{
		if (_line.match(ScriptTagRegex))
		{
			BundleMD5 = _line.split('<script type="text/javascript" src="/app.')[1].split('.js">')[0];
			console.log(`Found Bundle with MD5 of '${BundleMD5}'`);
		}
	})

	if (BundleMD5 == null)
	{
		console.error('Script tag not found ;w;');
		process.exit(1);
	}

	if (fs.existsSync(`Data/app.min.${BundleMD5}.js`))
	{
		fs.unlinkSync(`Data/app.min.${BundleMD5}.js`);
	}

	await DownloadFile(`https://jackbox.tv/app.${BundleMD5}.js`,`./Data/app.min.${BundleMD5}.js`);

	fs.readFile(`Data/app.min.${BundleMD5}.js`,async (e,d)=>
	{
		if (e) throw e;
		var min = d.toString();

		var unmin = await beautify(d.toString(), {indent_size: 4});
		if (fs.existsSync(`Data/app.unmin.${BundleMD5}.js`))
		{
			fs.unlinkSync(`Data/app.unmin.${BundleMD5}.js`);
		}
		fs.writeFileSync(`Data/app.unmin.${BundleMD5}.js`,unmin);
		console.log(`Wrote Unpacked Jackbox File to './Data/app.unmin.${BundleMD5}.js'`);
	})

//	console.log(JackboxWebsiteContents);
})();
